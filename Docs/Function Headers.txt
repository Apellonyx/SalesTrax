Note that this document is *NOT* complete. It simply documents those functions that are already in the "main.py" file at
this moment. Also note that it uses conventions set up in a custom configuration of "Better Comments" (by Aaron Bond)
for Visual Studio Code. Symbols and hashtags that appear at the beginning of a line are used for color-coding purposes
to keep track of the completion status of various tasks. A copy of the custom configuration file used in this project
can be found in the "Docs" folder under the name "settings.json". To view this project with its original color-coding,
back up your own "C:\Users\{User}\AppData\Roaming\Code\User\settings.json" file and replace it with the one provided in
the "Docs" folder.

Lines beginning with "^" are fully implemented and have documentation completed.
Lines beginning with "?" are fully implemented, but lack proper documentation.
Lines beginning with "&" are incomplete (and may or may not have documentation).
Lines beginning with "<<" are placeholder functions with no documentation.

-----

^ bar_definition():
    Opens a window for selecting the requirements for generating and viewing bar charts.

^ bar_generation(x: str, y: str, chart, bar):
    Populates the "Bar Chart" window viewport with a bar chart as defined in 'bar_definition()'.

    Args:
        x (str): The name of the table column to use for the x-axis.
        y (str): The name of the table column to use for the y-axis.
        chart (_type_): The parent widget in which to place the bar chart.
        bar (_type_): The parent widget in which to place the 'matplotlib' toolbar.

^ check_temp_count():
    Check that 'records_temp' is empty before attempting to load a file.

^ clear_all_data():
    Clears all loaded data from all persistent lists EXCEPT 'datalog_msgs'. It allows the user to continue using the
    program to work on another document set without needing to close the program to do so.

^ clear_table():
    Clears the contents of the primary viewport (typically used for updating the table contents).

^ commit_all():
    Moves all temp records from the temp record list into the saved records list.

^ commit_popup():
    Displays a top-level popup asking how the user wishes to handle temporary records. Options are: "Commit All",
    "Reject All", and "Review Temporary".

^ commit_selection():
    Adds selected temp records to the saved records list and restores deleted records. Supports single and multiple
    selections.

^ disable_resize_cursor(event):
    Prevents the resizing cursor graphic by interrupting the default behavior of mouse motion when the mouse is
    positioned over a column separator.

    Args:
        event (tkinter.Event): A standard tkinter keybinding event. In this case, '<Motion>' (mouse movement), but
            it should not be manually declared.
    Returns:
        (str): This returns "break" back to the calling event, preventing it from performing its default behavior.

^ do_nothing():
    Literally just does nothing. Used to disable default behavior on things like "Close Window" buttons, etc.

^ edit_record(event):
    Creates a toplevel window for editing existing records.

    Args:
        event (tkinter.Event): A standard tkinter keybinding event. In this case, '<Double-Button-1>' (mouse double
            left-click), but it should not be manually declared.

^ exit_functions():
    Postpones exiting the program to perform obligatory exit functions such as saving the Datalog and exporting saved
    records that are yet to be exported.

^ export_file():
    This opens the 'Save File As...' dialog to export an Excel, ODS, or CSV file to disk. When successful,
    passes the file info to 'write_file()' for use.

^ get_selection(stop_select: bool = False):
    Grabs the contents of the currently selected lines in the viewport table and uses that information to locate the
    records in their respective record lists.

    Args:
        stop_select (bool, optional): Whether to clear the row selection on the chosen record when finding the record's
            list location. When used for record modifications, this should always be set to True, but for purposes that
            don't change the record values, set it to False. Defaults to False.
    Returns:
        (list): When successful, this returns a list that can be used by another function to locate and access the item
            more easily.

^ hide_toggle():
    Used to set the appearance of toggle buttons used to hide records with a specific status.

^ line_definition():
    Opens a window for selecting the axes for generating and viewing line charts.

^ line_generation(x: str, y: str, chart: tk.Widget, bar: tk.Widget):
    Populates the "Line Chart" window viewport with a line chart as defined in 'line_definition()'.

    Args:
        x (str): The name of the table column to use for the x-axis.
        y (str): The name of the table column to use for the y-axis.
        chart (_type_): The parent widget in which to place the line chart.
        bar (_type_): The parent widget in which to place the 'matplotlib' toolbar.

^ link_to_github():
    Opens a link to the SaleTrax repository on GitHub.
    
    Args:
        page (str): Specific GitHub navigation information (e.g. "issues/", "wiki/", etc.). Defaults to "".

^ load_file():
    This opens the file select dialog to load an Excel, ODS, or CSV file from disk. When successful, passes this file
    to 'pop_temp()' for use.

^ log_msg(msg: str = "This event is not functional yet.", popup: bool = True):
    Logs changes to the record lists in the Datalog. Optionally displays a top-level messagebox to the user with the
    same message.

    Args:
        msg (str, optional): Message to record in the Datalog. Defaults to "This event is not functional yet."
        popup (bool, optional): If True, display a top-level messagebox with the message contents. Defaults to True.

^ notebook_update():
    Updates the Validation Control window on a 100 ms loop whenever the window is open.

^ pop_filter(clear: bool = False):
    This populates the filtered record list based on active filters and sorting options, with optional stacking.
    Alternatively, it can also clear the filtered record list, enforcing the use of the standard master list in
    populating the viewport table instead.

    Args:
        clear (bool, optional): Set to True to bypass the use of filters and sorting. Defaults to False.

^ pop_listbox(tab: str):
    Populates the listboxes in the Validation Control window when the "Auto-Populate" button is pressed.

    Args:
        tab (str): The name of the tab to populate ("Employee", "Location", or "Department").

^ pop_master(send_log: bool = False):
    This clears the current master record list and repopulates it with data from the saved, deleted, invalid, and temp
    record lists. It is called any time the component record lists are modified, refreshing of the viewport table.

    Args:
        send_log (bool, optional): When True, a Datalog entry is sent to 'log_msg' containing an updated total record
            count. Note that this does NOT result in a popup, only a log entry. Defaults to False.

^ pop_temp(path: str):
    Converts a tabular source document into a list of dictionaries for the program to work from.

    Args:
        path (str): The file path to the source document.

^ pop_table():
    Populates the viewport table (Treeview widget) with data. If any filter or sort is active, it will populate with
    the contents of the filtered record list; otherwise, it will populate with the contents of the master record list.

^ refresh_lists():
    Sorts validation lists, and removes any duplicate entries, and refreshes the listboxes in the "Validation Control"
    window.

^ refresh_table(repop_table: bool = True, master_log: bool = False):
    Clears the contents of the viewport table, refreshes the contents of the master and filtered record lists, and then
    repopulates the viewport table with updated data.

    Args:
        repop_table (bool, optional): Whether to repopulate the viewport table after clearing it. Set this to False for
            simply clearing the table. Defaults to True.
        master_log (bool, optional): Whether to send a Datalog message when repopulating the master record list. Set
            this to True when performing record modifications. Defaults to False.

^ reject_all():
    Rejects all temporary records in one batch action.

^ reject_selection():
    Deletes the selected temp, saved, and invalid records, excluding them from export. Supports single and multiple
    selections.

^ root_update():
    A recreation of a traditional main loop run every 100 ms, written as a partial redirection of the 'mainloop()'
    function from 'tkinter' to allow custom actions to be defined in this file without overriding 'mainloop'.

^ save_log():
    Saves the contents of 'datalog_msgs' to a text file in the user's "My Documents/SalesTrax/Datalog" folder and clears
    the contents of 'datalog_msgs'. Log files are appended with the date in "YYYY-MM-DD" format and an iterative 3-digit
    index number that allows multiple logs to be saved on the same date without overwriting any earlier logs.

^ select_toggle(state: bool):
    Enables and disables menu options, shortcut buttons, and keybindings based on the record status of the currently
    selected table row (or lack thereof).

    Args:
        state (bool): True when a row is selected, False when no row is selected.

^ toggle_datalog(state: bool = False):
    Handles the visibility of the Datalog window. Technically speaking, it does not actually close when SalesTrax is
    running; it only hides.

    Args:
        state (bool, optional): When True, the Datalog becomes visible, and when False, it is hidden. Defaults to False.

^ toggle_filter():
    This turns off all active filters and toggles when the user invokes it.

^ tree_click(event):
    This determines which area of the Treeview object was clicked to determine which action it takes. If a separator was
    clicked, do nothing. If a column header was clicked, sort the contents of the tree based the column header.

    Args:
        event (tkinter.Event): A standard tkinter keybinding event. In this case, '<Button-1>' (mouse left-click), but
        it should not be manually declared.
    Returns:
        (str): This returns "break" back to the calling event, preventing it from performing its default behavior.

^ update_record(record: dict, values: list):
    Performs direct record modifications based on criteria defined in 'edit_record()'.

    Args:
        record (dict): The record list address of the record to be modified. Note: This is an object reference.
        values (list): The new values to use in the record modification. Note: This is a list of object references.

^ validate_all():
    Iterates through the composite record lists to ensure their status hasn't been changed by validation control.
    Redistributes any records that have changed status according to their new status.

^ validate_temp():
    Processes every individual record in the temp record list after importing to ensure they meet the requirements of
    the program. This may include combining similar keys (such as "Date" and "Time" into "Timestamp"), renaming keys to
    match existing records, checking user-defined validation strings to locate misspelled or incorrect names, locations,
    or departments, etc.

& write_file(path: str):
    Writes all records with "Saved" status to a CSV, ODS, or XLSX file.

    Args:
        path (str): The filename and location of the new/updated file.
