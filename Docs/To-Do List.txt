Note that this document is *NOT* complete. It simply documents those tasks that are at the top of my priorities as of
this moment. Also note that it uses conventions set up in a custom configuration of "Better Comments" (by Aaron Bond)
for Visual Studio Code. Symbols and hashtags that appear at the beginning of a line are used for color-coding purposes
to keep track of the completion status of various tasks. A copy of the custom configuration file used in this project
can be found in the "Docs" folder under the name "settings.json". To view this project with its original color-coding,
back up your own "C:\Users\{User}\AppData\Roaming\Code\User\settings.json" file and replace it with the one provided in
the "Docs" folder.

Lines beginning with "#Task:" are used as bullet points for each major task.
Lines beginning with "#Alt:" are alternative solutions to the task being barinstormed.
Lines beginning with "#Idea:" are potential changes that may or may not be implemented. Further research is required
	before a final decision can be made.
Lines beginning with "^" are implemented in a fully-functional capacity.
Lines beginning with "?" are partially implemented, but cannot be completed without further application developments.
Lines beginning with "*" are notes, rationalizations, and/or clarifications regarding the point immediately above them.
And lines beginning with "&" are fully unimplemented.

-----

#Task: Create in-app user manual alongside project updates.
& Start with making user manual pages for already-existing features and use-cases.
& Then, as each feature is implemented, add a reference to it in the user manual.
#Alt: Link to GitHub Wiki instead. The "Help" menu list already includes this as an option.
& This would require significantly less coding, resulting in a smaller file size.

#Task: Add "Select All" back to the "Edit" menu cascade and make it functional.
& Maybe also make an "Invert Selection" option in the "Edit" menu, too.
& A "Hide Selected" button would be nice, too, as a form of manual filtering that doesn't require status changes.

#Task: Add functionality to the "Toggle Filter..." button when a filter or sort is NOT already active.
& This should raise a new dialog for modifying filters in a more complete way:
&	It should have a tab for each column, each containing two listboxes and four buttons:
&		The left listbox contains whitelisted values for the field:
&			Everything in that box should be shown in the table.
&		The right listbox should contain blacklisted values for the field:
&			Everything in that box should NOT be shown in the table.
&		The four buttons should handle value movement from one listbox to the other:
&			">" (move one right), ">>" (move all right), "<<" (move all left), and "<" (move one left)
& Also add extra functionality when a filter or sort IS already active:
&	Ask the user if they wish to clear the current filters and sorts or if they wish to modify the existing ones.
&	If "Clear", simply clear the filters and sorts.
&	If "Modify", open the "Choose Filter" dialog with any active filters and sorts already in place.

#Task: Combine all chart types into one persistent window.
& There should be a "Choose Chart Type" entry field.
& All other fields should auto-generate based on the chosen chart type.
& "Y-Axis" should be disabled until "X-Axis" is chosen, then auto-populate based on compatible values.
& There should be checkboxes for including temporary, deleted, and invalid records.
&	Individual invalid records will still be excluded if their x or y value is invalid.

#Task: Create a question popup asking if the user wants ODS timestamps in string format or as an integer.

#Task: Create a new 'datalog' object and 'log_msg()' function to replace the existing 'message_box()'.
? It should log data regarding the following:
^	validation failures
^	duplicate record exclusions
^	commits
^	rejections
^	deletions
^	restorations
^	file loads
&	error reports
^ The datalog object opens in a console-like window, which can be accessed through the 'View' menu.
^ It will need to be scrollable and display an accurate timestamp for each message.
^	Data should be logged each time the user imports data during a session:
^		This will save the file path of the source file, as well as the number of records imported.
^		If any records fail validation, they will be logged along with the reason for validation failure.
^	Data should also be logged each time a record or group of records is committed, rejected, deleted, or restored.
^		Batch actions report the number of records affected by the action.
^	The dataLog's contents automatically export to a text file when the user exports data or exits the program.
^		This text file is named 'datalog_' and appended with the timestamp of when it was created.
^ Also add 'save_log()' button.
^    'save_log()' would write the contents of the 'dataLog' to a plain text file and then clear the widget.

#Task: Add window for user-defined field validation lists.
^ There should only be one Toplevel object that populates itself depending on the validation list chosen.
^	Employee Names
^	Business Locations
^	Product Categories
& Add spell-checking functionality to user validation lists.
&	Look up and test the 'difflib' library's 'get_close_matches' function to find near-matches when they exist.
&	When the program encounters a value that isn't in the validation list for that field, run the spell-checker.
&	If it finds a near-match in the relevant list, display a popup asking if the field should be corrected.
&	Make the spell-checking function opt-in for the user with a checkbox in each validation list window.

#Task: Create mathematical validation algorithm.
& If 'Cost', 'Quantity', and 'Total' columns are all present, auto-calculate the expected value for 'Total':
&	If incorrect, correct it.
& If 'Cost', 'Quantity', and 'Total' columns are present, AND only one of the three cells is empty:
&	Auto-calculate the missing value based on the present values.
& If 'Cost' and 'Quantity' columns are present, but the 'Total' column is missing, create 'Total' and auto-fill it.
& Do the same as above for any other combination of 'Cost', 'Quantity', and 'Total', where only one is missing.